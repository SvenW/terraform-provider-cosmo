package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/wundergraph/cosmo/terraform-provider-cosmo/internal/api"
)

type NamespaceResource struct {
	provider *Provider
}

type NamespaceResourceModel struct {
	Id   types.String `tfsdk:"id"`
	Name types.String `tfsdk:"name"`
}

func NewNamespaceResource() resource.Resource {
	return &NamespaceResource{}
}

func (r *NamespaceResource) Configure(_ context.Context, req resource.ConfigureRequest, _ *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}
	r.provider = req.ProviderData.(*Provider)
}

func (r *NamespaceResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_namespace"
}

func (r *NamespaceResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "The unique identifier of the namespace resource, automatically generated by the system.",
			},
			"name": schema.StringAttribute{
				Required:            true,
				MarkdownDescription: "The name of the namespace.",
			},
		},
	}
}

func (r *NamespaceResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data NamespaceResourceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	if r.provider == nil {
		resp.Diagnostics.AddError(
			"Unconfigured Provider",
			"Expected a configured provider but it was nil.",
		)
		return
	}

	client := r.provider.client
	apiKey := r.provider.cosmoApiKey

	err := api.CreateNamespace(ctx, client, apiKey, data.Name.ValueString())
	if err != nil {
		resp.Diagnostics.AddError("Error creating namespace", fmt.Sprintf("Could not create namespace: %s", err))
		return
	}

	data.Id = types.StringValue(data.Name.ValueString())
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *NamespaceResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data NamespaceResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	client := r.provider.client
	apiKey := r.provider.cosmoApiKey

	namespaces, err := api.ListNamespaces(ctx, client, apiKey)
	if err != nil {
		resp.Diagnostics.AddError("Error reading namespace", fmt.Sprintf("Could not read namespaces: %s", err))
		return
	}

	for _, namespace := range namespaces {
		if namespace.Name == data.Name.ValueString() {
			data.Id = types.StringValue(namespace.Name)
			break
		}
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *NamespaceResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data NamespaceResourceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	client := r.provider.client
	apiKey := r.provider.cosmoApiKey

	err := api.RenameNamespace(ctx, client, apiKey, data.Name.ValueString(), data.Name.ValueString())
	if err != nil {
		resp.Diagnostics.AddError("Error updating namespace", fmt.Sprintf("Could not update namespace: %s", err))
		return
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *NamespaceResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data NamespaceResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	client := r.provider.client
	apiKey := r.provider.cosmoApiKey

	err := api.DeleteNamespace(ctx, client, apiKey, data.Name.ValueString())
	if err != nil {
		resp.Diagnostics.AddError("Error deleting namespace", fmt.Sprintf("Could not delete namespace: %s", err))
		return
	}
}
