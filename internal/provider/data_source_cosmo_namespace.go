package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	platformv1 "github.com/wundergraph/cosmo/terraform-provider-cosmo/gen/proto/wg/cosmo/platform/v1"
	"github.com/wundergraph/cosmo/terraform-provider-cosmo/internal/api"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &NamespaceDataSource{}

func NewNamespaceDataSource() datasource.DataSource {
	return &NamespaceDataSource{}
}

// NamespaceDataSource defines the data source implementation.
type NamespaceDataSource struct {
	provider Provider
}

// NamespaceDataSourceModel describes the data source data model.
type NamespaceDataSourceModel struct {
	Id   types.String `tfsdk:"id"`
	Name types.String `tfsdk:"name"`
}

func (d *NamespaceDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_namespace"
}

func (d *NamespaceDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Cosmo Namespace Data Source",

		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "The unique identifier of the namespace resource, automatically generated by the system.",
			},
			"name": schema.StringAttribute{
				Required:            true,
				MarkdownDescription: "The name of the namespace.",
			},
		},
	}
}

func (d *NamespaceDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	provider, ok := req.ProviderData.(*Provider)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Data Source Configure Type",
			fmt.Sprintf("Expected *Provider, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	d.provider = *provider
}

func (d *NamespaceDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data NamespaceDataSourceModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Validate that the name is set
	if data.Name.IsNull() || data.Name.ValueString() == "" {
		resp.Diagnostics.AddError(
			"Invalid Namespace Name",
			"The 'name' attribute is required.",
		)
		return
	}

	// Fetch the namespaces via the API
	namespaces, err := api.ListNamespaces(ctx, d.provider.client, d.provider.cosmoApiKey)
	if err != nil {
		resp.Diagnostics.AddError(
			"Error Reading Namespaces",
			fmt.Sprintf("Could not read namespaces: %s", err),
		)
		return
	}

	// Find the requested namespace
	var foundNamespace *platformv1.Namespace
	for _, namespace := range namespaces {
		if namespace.Name == data.Name.ValueString() {
			foundNamespace = namespace
			break
		}
	}

	if foundNamespace == nil {
		resp.Diagnostics.AddError(
			"Namespace Not Found",
			fmt.Sprintf("Namespace with name '%s' not found", data.Name.ValueString()),
		)
		return
	}

	// Update state with the fetched data
	data.Id = types.StringValue(foundNamespace.Name)
	data.Name = types.StringValue(foundNamespace.Name)

	tflog.Trace(ctx, "Read namespace data source", map[string]interface{}{
		"id": data.Id.ValueString(),
	})

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
