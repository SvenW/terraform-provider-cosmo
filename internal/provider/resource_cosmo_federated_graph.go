package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/wundergraph/cosmo/terraform-provider-cosmo/gen/proto/wg/cosmo/common"
	platformv1 "github.com/wundergraph/cosmo/terraform-provider-cosmo/gen/proto/wg/cosmo/platform/v1"
	"github.com/wundergraph/cosmo/terraform-provider-cosmo/internal/api"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &FederatedGraphResource{}
var _ resource.ResourceWithImportState = &FederatedGraphResource{}

func NewFederatedGraphResource() resource.Resource {
	return &FederatedGraphResource{}
}

// FederatedGraphResource defines the resource implementation for federated graphs.
type FederatedGraphResource struct {
	provider Provider
}

// FederatedGraphResourceModel describes the resource data model for a federated graph.
type FederatedGraphResourceModel struct {
	Id                     types.String `tfsdk:"id"`
	Name                   types.String `tfsdk:"name"`
	Namespace              types.String `tfsdk:"namespace"`
	Readme                 types.String `tfsdk:"readme"`
	ServiceUrl             types.String `tfsdk:"service_url"`
	AdmissionWebhookURL    types.String `tfsdk:"admission_webhook_url"`
	AdmissionWebhookSecret types.String `tfsdk:"admission_webhook_secret"`
	LabelMatchers          types.List   `tfsdk:"label_matchers"`
}

func (r *FederatedGraphResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_federated_graph"
}

func (r *FederatedGraphResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Federated Graph Resource for managing federated graphs",

		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "The unique identifier of the federated graph resource, automatically generated by the system.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"name": schema.StringAttribute{
				MarkdownDescription: "The name of the federated graph. This is used to identify the graph and must be unique within the namespace.",
				Optional:            true,
			},
			"namespace": schema.StringAttribute{
				MarkdownDescription: "The namespace in which the federated graph is located. Defaults to 'default' if not provided.",
				Optional:            true,
				Computed:            true,
				Default:             stringdefault.StaticString("default"),
			},
			"readme": schema.StringAttribute{
				MarkdownDescription: "Readme content for the federated graph.",
				Optional:            true,
			},
			"admission_webhook_url": schema.StringAttribute{
				MarkdownDescription: "The URL for the admission webhook that will be triggered during graph operations.",
				Optional:            true,
			},
			"admission_webhook_secret": schema.StringAttribute{
				MarkdownDescription: "The secret token used to authenticate the admission webhook requests.",
				Optional:            true,
				Sensitive:           true,
			},
			"service_url": schema.StringAttribute{
				MarkdownDescription: "The URL of the service that routes requests to the federated graph. Defaults to 'https://default-service-url.com' if not provided.",
				Required:            true,
			},
			"label_matchers": schema.ListAttribute{
				MarkdownDescription: "A list of label matchers used to select the services that will form the federated graph.",
				Optional:            true,
				ElementType:         types.StringType,
				Computed:            true,
				Default:             listdefault.StaticValue(types.ListValueMust(types.StringType, []attr.Value{})),
				PlanModifiers: []planmodifier.List{
					listplanmodifier.UseStateForUnknown(),
				},
			},
		},
	}
}

func (r *FederatedGraphResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	provider, ok := req.ProviderData.(*Provider)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Data Source Configure Type",
			fmt.Sprintf("Expected *http.Client, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.provider = *provider
}

func (r *FederatedGraphResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data FederatedGraphResourceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	if data.Name.IsNull() || data.Name.ValueString() == "" {
		addDiagnosticError(resp, "Invalid Federated Graph Name", "The 'name' attribute is required.")
		return
	}

	labelMatchers, err := convertAndValidateLabelMatchers(data.LabelMatchers, resp)
	if err != nil {
		return
	}

	graph := platformv1.FederatedGraph{
		Name:                   data.Name.ValueString(),
		Namespace:              data.Namespace.ValueString(),
		RoutingURL:             data.ServiceUrl.ValueString(),
		AdmissionWebhookUrl:    data.AdmissionWebhookURL.ValueStringPointer(),
		Readme:                 data.Readme.ValueStringPointer(),
		LabelMatchers:          labelMatchers,
	}

	var admissionWebhookSecret *string
	if !data.AdmissionWebhookSecret.IsNull() {
		admissionWebhookSecret = data.AdmissionWebhookSecret.ValueStringPointer()
	}

	apiResponse, err := api.CreateFederatedGraph(ctx, r.provider.client, r.provider.cosmoApiKey, admissionWebhookSecret, &graph)
	if err != nil {
		addDiagnosticError(resp, "Error Creating Federated Graph", fmt.Sprintf("Could not create federated graph: %s", err))
		return
	}

	if len(apiResponse.CompositionErrors) > 0 {
		addDiagnosticError(resp, "Composition Error", fmt.Sprintf("Composition errors: %v", apiResponse.CompositionErrors))
		return
	}

	res, err := api.GetFederatedGraph(ctx, r.provider.client, r.provider.cosmoApiKey, graph.Name, graph.Namespace)
	if err != nil {
		addDiagnosticError(resp, "Error Retrieving Federated Graph", fmt.Sprintf("Could not retrieve federated graph: %s", err))
		return
	}

	data.Id = types.StringValue(res.Graph.GetId())

	logAction(ctx, "created", data.Id.ValueString(), data.Name.ValueString(), data.Namespace.ValueString())

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *FederatedGraphResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data FederatedGraphResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	if data.Id.IsNull() || data.Id.ValueString() == "" {
		addDiagnosticError(resp, "Invalid Resource ID", "Cannot read federated graph without an ID.")
		return
	}

	apiResponse, err := api.GetFederatedGraph(ctx, r.provider.client, r.provider.cosmoApiKey, data.Name.ValueString(), data.Namespace.ValueString())
	if err != nil {
		addDiagnosticError(resp, "Error Reading Federated Graph", fmt.Sprintf("Could not read federated graph: %s", err))
		return
	}

	if apiResponse.GetResponse().Code != common.EnumStatusCode_OK {
		addDiagnosticError(resp, "Error Reading Federated Graph", fmt.Sprintf("Failed to retrieve federated graph with status code: %v, details: %s", apiResponse.GetResponse().Code, apiResponse.GetResponse().GetDetails()))
		return
	}

	graph := apiResponse.Graph
	data.Name = types.StringValue(graph.Name)
	data.Namespace = types.StringValue(graph.Namespace)
	data.ServiceUrl = types.StringValue(graph.RoutingURL)

	var labelMatchers []attr.Value
	for _, matcher := range graph.LabelMatchers {
		labelMatchers = append(labelMatchers, types.StringValue(matcher))
	}
	data.LabelMatchers = types.ListValueMust(types.StringType, labelMatchers)

	logAction(ctx, "read", data.Id.ValueString(), data.Name.ValueString(), data.Namespace.ValueString())

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *FederatedGraphResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data FederatedGraphResourceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	if data.Id.IsNull() || data.Id.ValueString() == "" {
		addDiagnosticError(resp, "Invalid Resource ID", "Cannot update federated graph because the resource ID is missing.")
		return
	}

	labelMatchers, err := convertAndValidateLabelMatchers(data.LabelMatchers, resp)
	if err != nil {
		return
	}

	graph := platformv1.FederatedGraph{
		Name:                   data.Name.ValueString(),
		Namespace:              data.Namespace.ValueString(),
		RoutingURL:             data.ServiceUrl.ValueString(),
		AdmissionWebhookUrl:    data.AdmissionWebhookURL.ValueStringPointer(),
		LabelMatchers:          labelMatchers,
	}

	var admissionWebhookSecret *string
	if !data.AdmissionWebhookSecret.IsNull() {
		admissionWebhookSecret = data.AdmissionWebhookSecret.ValueStringPointer()
	}

	apiResponse, err := api.UpdateFederatedGraph(ctx, r.provider.client, r.provider.cosmoApiKey, admissionWebhookSecret, &graph)
	if err != nil {
		addDiagnosticError(resp, "Error Updating Federated Graph", fmt.Sprintf("Could not update federated graph: %s", err))
		return
	}

	if len(apiResponse.CompositionErrors) > 0 {
		addDiagnosticError(resp, "Composition Error", fmt.Sprintf("Composition errors: %v", apiResponse.CompositionErrors))
		return
	}

	logAction(ctx, "updated", data.Id.ValueString(), data.Name.ValueString(), data.Namespace.ValueString())

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *FederatedGraphResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data FederatedGraphResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	if data.Id.IsNull() || data.Id.ValueString() == "" {
		addDiagnosticError(resp, "Invalid Resource ID", "Cannot delete the federated graph because the resource ID is missing.")
		return
	}

	err := api.DeleteFederatedGraph(ctx, r.provider.client, r.provider.cosmoApiKey, data.Name.ValueString(), data.Namespace.ValueString())
	if err != nil {
		addDiagnosticError(resp, "Error Deleting Federated Graph", fmt.Sprintf("Could not delete federated graph: %s", err))
		return
	}

	logAction(ctx, "deleted", data.Id.ValueString(), data.Name.ValueString(), data.Namespace.ValueString())
}

func (r *FederatedGraphResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	// Import the federated graph based on the ID
	resource.ImportStatePassthroughID(ctx, path.Root("id"), req, resp)
}
