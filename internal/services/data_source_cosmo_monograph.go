package services

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/wundergraph/cosmo/terraform-provider-cosmo/internal/api"
	"github.com/wundergraph/cosmo/terraform-provider-cosmo/internal/client"
	"github.com/wundergraph/cosmo/terraform-provider-cosmo/internal/utils"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &MonographDataSource{}

func NewMonographDataSource() datasource.DataSource {
	return &MonographDataSource{}
}

// MonographDataSource defines the data source implementation.
type MonographDataSource struct {
	*client.PlatformClient
}

// MonographDataSourceModel describes the data source data model.
type MonographDataSourceModel struct {
	Id        types.String `tfsdk:"id"`
	Name      types.String `tfsdk:"name"`
	Namespace types.String `tfsdk:"namespace"`
	Content   types.String `tfsdk:"content"`
}

// Metadata returns the data source type name.
func (d *MonographDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_monograph"
}

// Schema defines the schema for the data source.
func (d *MonographDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Cosmo Monograph Data Source",
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "The unique identifier of the monograph resource, automatically generated by the system.",
			},
			"name": schema.StringAttribute{
				Required:            true,
				MarkdownDescription: "The name of the monograph.",
			},
			"namespace": schema.StringAttribute{
				Optional:            true,
				MarkdownDescription: "The namespace in which the monograph is located.",
			},
			"content": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "The content of the monograph.",
			},
		},
	}
}

// Configure prepares the data source for reading.
func (d *MonographDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*client.PlatformClient)
	if !ok {
		utils.AddDiagnosticError(resp, "Unexpected Data Source Configure Type", fmt.Sprintf("Expected *client.PlatformClient, got: %T. Please report this issue to the provider developers.", req.ProviderData))
		return
	}

	d.PlatformClient = client
}

// Read refreshes the data source data.
func (d *MonographDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data MonographDataSourceModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	if data.Name.IsNull() || data.Name.ValueString() == "" {
		utils.AddDiagnosticError(resp, "Invalid Monograph Name", "The 'name' attribute is required.")
		return
	}

	namespace := data.Namespace.ValueString()
	if namespace == "" {
		namespace = "default"
	}

	_, err := api.GetMonograph(ctx, d.PlatformClient.Client, d.PlatformClient.CosmoApiKey, data.Name.ValueString(), namespace)
	if err != nil {
		utils.AddDiagnosticError(resp, "Error Reading Monograph", fmt.Sprintf("Could not read monograph: %s", err))
		return
	}

	// data.Id = types.StringValue(apiResponse.Id)
	// data.Content = types.StringValue(apiResponse.Content)
	// data.Namespace = types.StringValue(apiResponse.Namespace)

	tflog.Trace(ctx, "Read monograph data source", map[string]interface{}{
		"id": data.Id.ValueString(),
	})

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}